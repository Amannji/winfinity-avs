var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import fetch from "node-fetch";
export const formatAddress = (address) => {
    if (!address.startsWith("http://") && !address.startsWith("https://")) {
        address = `http://${address}`;
    }
    while (address.endsWith("/")) {
        address = address.substring(0, address.length - 1);
    }
    return address;
};
const checkOk = (response) => __awaiter(void 0, void 0, void 0, function* () {
    if (!response.ok) {
        let message = yield response.text();
        try {
            message = JSON.parse(message).error;
        }
        catch (error) {
            // Do nothing.
        }
        throw new Error(message);
    }
});
export const get = (address) => __awaiter(void 0, void 0, void 0, function* () {
    const response = yield fetch(formatAddress(address));
    yield checkOk(response);
    return response;
});
export const post = (address, data) => __awaiter(void 0, void 0, void 0, function* () {
    const response = yield fetch(formatAddress(address), {
        method: "POST",
        body: JSON.stringify(data)
    });
    yield checkOk(response);
    return response;
});
export const del = (address, data) => __awaiter(void 0, void 0, void 0, function* () {
    const response = yield fetch(formatAddress(address), {
        method: "DELETE",
        body: JSON.stringify(data)
    });
    yield checkOk(response);
    return response;
});
